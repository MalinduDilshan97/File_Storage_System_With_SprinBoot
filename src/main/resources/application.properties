# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection


spring.main.banner-mode=off
spring.datasource.url = jdbc:mysql://localhost:3306/file?useSSL=false
spring.datasource.dbcp2.validation-query=SELECT 1
spring.datasource.dbcp2.test-on-borrow=true
spring.jpa.properties.hibername.cache.use_second_level_cache: false
spring.jpa.properties.hibername.cache.use_query_cache: false
spring.jpa.properties.hibername.generate_statistics: false

# Username and password
spring.datasource.username = root
spring.datasource.password = 1234

## Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

#spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



# ===============================
# = MULTIPART PROPERTIES
# ===============================

# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=./File Storage